{"version":3,"sources":["Message.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Message","forwardRef","props","ref","isUser","user","username","console","log","className","Card","CardContent","Typography","color","variant","component","text","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","message","data","prompt","src","FormControl","Input","placeholder","value","onChange","event","target","IconButton","disabled","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"0VAyBeA,G,MArBCC,sBAAW,SAACC,EAAOC,GAC/B,IAAMC,EAASF,EAAMG,OAASH,EAAMI,SAGpC,OAFAC,QAAQC,IAAIN,EAAMG,MAClBE,QAAQC,IAAIN,EAAMI,UAEd,yBAAKH,IAAKA,EAAKM,UAAS,kBAAaL,GAAU,kBAC3C,kBAACM,EAAA,EAAD,CAAMD,UAAWL,EAAS,oBAAsB,sBAC5C,kBAACO,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,MAAM,QACNC,QAAQ,KACRC,UAAU,OAERX,GAAD,UAAcF,EAAMI,UAAY,eAAhC,MALL,IAK0DJ,EAAMc,a,iBCArEC,EAfKC,IAASC,cAAc,CAEnCC,OAAQ,0CACRC,WAAY,iDACZC,YAAa,wDACbC,UAAW,iCACXC,cAAe,6CACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIAC,Y,iCC+DRC,MApEf,WAAe,MAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAGmBF,mBAAS,IAH5B,mBAGNG,EAHM,KAGIC,EAHJ,OAIkBJ,mBAAS,IAJ3B,mBAINxB,EAJM,KAII6B,EAJJ,KAsCb,OA7BAC,qBAAU,WAERnB,EAAGoB,WAAW,YACbC,QAAQ,YAAa,QACrBC,YAAW,SAAAC,GACVN,EAAYM,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAK,CAACC,GAAID,EAAIC,GAAIC,QAASF,EAAIG,iBAGjE,IAEHV,qBAAU,WAGRD,EAAYY,OAAO,6BAClB,IAgBD,yBAAKtC,UAAU,OACb,yBAAKuC,IAAI,+FACT,6DACA,uCAAa1C,GAEb,0BAAMG,UAAU,aACd,kBAACwC,EAAA,EAAD,CAAaxC,UAAU,oBACrB,kBAACyC,EAAA,EAAD,CAAOzC,UAAU,aAAa0C,YAAY,qBAAqBC,MAAOrB,EAAOsB,SAAU,SAAAC,GAAK,OAAItB,EAASsB,EAAMC,OAAOH,UACtH,kBAACI,EAAA,EAAD,CAAY/C,UAAU,kBAAkBgD,UAAW1B,EAAOjB,QAAQ,YAAYD,MAAM,UAAU6C,KAAK,SAAQC,QAtB/F,SAACL,GAEnBA,EAAMM,iBAEN3C,EAAGoB,WAAW,YAAYwB,IAAI,CAC5BhB,QAASd,EACTzB,SAAUA,EACVwD,UAAU5C,IAASU,UAAUmC,WAAWC,oBAG1ChC,EAAS,MAaD,kBAAC,IAAD,SAMN,kBAAC,IAAD,KAEIC,EAASS,KAAI,gBAAEE,EAAF,EAAEA,GAAIC,EAAN,EAAMA,QAAN,OACX,kBAAC,EAAD,CAASoB,IAAKrB,EAAIvC,KAAMC,EAAUA,SAAUuC,EAAQvC,SAAUU,KAAM6B,EAAQA,gBCvDpEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5E,QAAQ4E,MAAMA,EAAMtC,c","file":"static/js/main.dd4b39ef.chunk.js","sourcesContent":["import React, {forwardRef} from 'react'\nimport { Card, CardContent, Typography } from '@material-ui/core';\nimport \"./Message.css\";\n\nconst Message = forwardRef((props, ref) => {\n    const isUser = props.user === props.username;\n    console.log(props.user);\n    console.log(props.username);\n    return (\n        <div ref={ref} className={`message ${isUser && 'message__user'}`}>\n            <Card className={isUser ? \"message__userCard\" : \"message__guestCard\"}>\n                <CardContent>\n                    <Typography\n                        color=\"white\"\n                        variant=\"h5\"\n                        component=\"h2\"\n                    >\n                        {!isUser && `${props.username || 'Unknown User'}: `} {props.text}\n                    </Typography>\n                </CardContent>\n            </Card>\n        </div>\n    )\n})\n\nexport default Message;\n","import firebase from \"firebase\";\n\nconst firebaseApp = firebase.initializeApp({\n\n        apiKey: \"AIzaSyAQC4XPdM664mQWwqEqQ_QiQOoKPMhCdTY\",\n        authDomain: \"facebook-messenger-clone-9a839.firebaseapp.com\",\n        databaseURL: \"https://facebook-messenger-clone-9a839.firebaseio.com\",\n        projectId: \"facebook-messenger-clone-9a839\",\n        storageBucket: \"facebook-messenger-clone-9a839.appspot.com\",\n        messagingSenderId: \"167294017746\",\n        appId: \"1:167294017746:web:5502145c8b7a51c387cd0b\",\n        measurementId: \"G-HMB7QYH89X\"\n\n});\n\nconst db = firebaseApp.firestore();\n\nexport default db;","import React, { useState, useEffect } from 'react';\nimport { Button, FormControl, InputLabel, Input } from '@material-ui/core';\nimport './App.css';\nimport Message from './Message';\nimport db from './firebase';\nimport firebase from 'firebase';\nimport FlipMove from 'react-flip-move';\nimport SendIcon from '@material-ui/icons/Send';\nimport { IconButton } from '@material-ui/core';\n\nfunction App() {\n  //state in react\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [username, setUsername] =useState('');\n\n  //useState = variable in react\n  //useEffect = run code on a condition\n\n  useEffect(() => {\n    //run once when the app component loads\n    db.collection('messages')\n    .orderBy('timestamp', 'desc')\n    .onSnapshot(snapshot => {\n      setMessages(snapshot.docs.map(doc => ({id: doc.id, message: doc.data()})))\n    });\n\n  }, [] )\n\n  useEffect(() => {\n    //run code here...\n    //if its blank then this code runs once\n    setUsername(prompt('Please enter your name'))\n  }, [] ) //condition\n\n  const sendMessage = (event) =>{\n    //all the logic to send the message\n    event.preventDefault();\n\n    db.collection('messages').add({\n      message: input,\n      username: username,\n      timestamp:firebase.firestore.FieldValue.serverTimestamp()\n    })\n\n    setInput('');\n  }\n\n  return (\n    <div className=\"App\">\n      <img src=\"https://facebookbrand.com/wp-content/uploads/2018/09/Header-e1538151782912.png?w=100&h=100\"/>\n      <h1>Hello Everybody ðŸš€ </h1>\n      <h2>Welcome {username}</h2>\n\n      <form className=\"app__form\">\n        <FormControl className=\"app__formControl\"> \n          <Input className=\"app__input\" placeholder=\"Enter a message...\" value={input} onChange={event => setInput(event.target.value)}/>\n          <IconButton className=\"app__iconButton\" disabled={!input} variant=\"contained\" color=\"primary\" type=\"submit\"onClick={sendMessage}>\n            <SendIcon />\n          </IconButton>\n        </FormControl>\n        \n      </form>\n\n      <FlipMove>\n        {\n          messages.map(({id, message}) => (\n            <Message key={id} user={username} username={message.username} text={message.message} />\n          ))\n        }\n      </FlipMove>\n\n      \n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}